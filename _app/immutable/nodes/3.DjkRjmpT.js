import{a as N,t as A}from"../chunks/disclose-version.BeA8L5uH.js";import"../chunks/legacy.BUbkrQNO.js";import{P as C}from"../chunks/PostWrapper._9n84_Y8.js";import{s as n,o as L,q as a,t as s,v as e}from"../chunks/runtime.BAjqlE16.js";import{h as t}from"../chunks/html.BdEIDQ3K.js";const T={title:"RE-Implementing And Understanding NeRF",date:"2024-12-21T17:50:26.323Z"};var G=A('<h3><strong>Introduction</strong></h3> <p>Neural Radiance Fields (NeRF), introduced in the paper <a href="https://google.com" rel="nofollow"><em>“NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis”</em></a> by Mildenhall et al., offers a groundbreaking approach for representing volumetric fields and 3D scenes. By leveraging the power of deep neural networks and differentiable volume rendering, NeRF can synthesize photo-realistic views of complex scenes from a sparse set of input images.</p> <p>Unlike traditional methods, NeRF encodes scene geometry and appearance into a continuous 5D function parameterized by a neural network. This function takes as input a 3D spatial point and a viewing direction and outputs color (<span class="math math-inline"><!></span>) and volume density values. This formulation allows NeRF to model intricate lighting effects, occlusions, and detailed textures.</p> <h3><strong>What Are Neural Radiance Fields?</strong></h3> <p>At its core, a Neural Radiance Field (NeRF) is a neural network that models the radiance emitted by a scene at every point in 3D space, along every possible viewing direction. Formally, it can be described as a function:</p> <div class="math math-display"><!></div> <p>where:</p> <ul><li><span class="math math-inline"><!></span> is the 3D spatial coordinate of the point.</li> <li><span class="math math-inline"><!></span> represents the viewing direction, parameterized in spherical coordinates.</li> <li><span class="math math-inline"><!></span> is the RGB color at the given point.</li> <li><span class="math math-inline"><!></span> is the volume density (a measure of opacity or likelihood of light being scattered or absorbed).</li> <li><span class="math math-inline"><!></span> is the neural network, parameterized by <span class="math math-inline"><!></span>, which is optimized during training.</li></ul> <p>Ray are marched through the scene (starting from the camera), and this neural network is evaluated on multiple <em>query points</em> alongs these rays. Finally the color and density information at these query points for each ray are combined into a single color which is the final output color of the ray. Colors from all such rays are used to make up the final 2D rendered image.</p> <h2><strong>Implementing NeRF</strong></h2> <p>Below is a step by step implementation of NeRF, in Python and PyTorch. Throughout the code, assume the following imports are available throughout.</p> <!> <h4>Let’s start</h4> <p>Given a camera pose (position and viewing direction), the first thing we do is march a bundle of rays from the camera through every pixel of the image plane. The image plane is a plane placed in front of the camera where the final render of the 3D scene will be drawn. Think of it as a canvas where the final rendered scene will be drawn.</p>',1);function P(p){var g=G(),i=n(L(g),4),y=n(a(i)),k=a(y);t(k,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">RGB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">RGB</span></span></span></span>'),s(y),e(),s(i);var m=n(i,6),M=a(m);t(M,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo separator="true">,</mo><mi mathvariant="bold">d</mi><mo stretchy="false">)</mo><mo>→</mo><mo stretchy="false">(</mo><mi mathvariant="bold">c</mi><mo separator="true">,</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_\\theta(\\mathbf{x}, \\mathbf{d}) \\to (\\mathbf{c}, \\sigma)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbf">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathbf">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span></span></span>'),s(m);var l=n(m,4),r=a(l),u=a(r),_=a(u);t(_,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">x</mi><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathbf{x} = (x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>'),s(u),e(),s(r);var o=n(r,2),f=a(o),E=a(f);t(E,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">d</mi><mo>=</mo><mo stretchy="false">(</mo><mi>θ</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathbf{d} = (\\theta, \\phi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mclose">)</span></span></span></span>'),s(f),e(),s(o);var c=n(o,2),v=a(c),F=a(v);t(F,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">c</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>g</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathbf{c} = (r, g, b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>'),s(v),e(),s(c);var h=n(c,2),w=a(h),D=a(w);t(D,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>'),s(w),e(),s(h);var x=n(h,2),d=a(x),R=a(d);t(R,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">F_\\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>'),s(d);var b=n(d,2),z=a(b);t(z,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>'),s(b),e(),s(x),s(l);var B=n(l,8);t(B,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> torch</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">from</span><span style="color:#D6DEEB"> torch </span><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> nn</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> torch.nn.functional </span><span style="color:#C792EA;font-style:italic">as</span><span style="color:#D6DEEB"> F</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> matplotlib.pyplot </span><span style="color:#C792EA;font-style:italic">as</span><span style="color:#D6DEEB"> plt</span></span></code></pre>`),e(4),N(p,g)}function O(p){C(p,{frontmatter:T,ContentBody:P})}export{O as component};
