import{a as Us,t as Os}from"./disclose-version.BeA8L5uH.js";import"./legacy.BUbkrQNO.js";import{s,o as Zs,q as a,t as n,v as l}from"./runtime.BAjqlE16.js";import{h as p}from"./html.BdEIDQ3K.js";const $s={title:"Implementing And Understanding NeRF",date:"2024-12-21T00:00:00.000Z"};var Qs=Os('<h3><strong>Introduction</strong></h3> <p>Neural Radiance Fields (NeRF), introduced in the paper <a href="https://arxiv.org/abs/2003.08934" rel="nofollow">“NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis”</a> by Mildenhall et al., offers a groundbreaking approach for representing volumetric fields and 3D scenes. By leveraging the power of deep neural networks and differentiable volume rendering, NeRF can synthesize photo-realistic views of complex scenes from a sparse set of input images.</p> <p>Unlike traditional methods, NeRF encodes scene geometry and appearance into a continuous 5D function parameterized by a neural network. This function takes as input a 3D spatial point and a viewing direction and outputs color (<span class="math math-inline"><!></span>) and volume density values. This formulation allows NeRF to model intricate lighting effects, occlusions, and detailed textures.</p> <h3><strong>What Are Neural Radiance Fields?</strong></h3> <p>At its core, a Neural Radiance Field (NeRF) is a neural network that models the radiance emitted by a scene at every point in 3D space, along every possible viewing direction. Formally, it can be described as a function:</p> <div class="math math-display"><!></div> <p>where:</p> <ul><li><span class="math math-inline"><!></span> is the 3D spatial coordinate of the point.</li> <li><span class="math math-inline"><!></span> represents the viewing direction, parameterized in spherical coordinates.</li> <li><span class="math math-inline"><!></span> is the RGB color at the given point.</li> <li><span class="math math-inline"><!></span> is the volume density (a measure of opacity or likelihood of light being scattered or absorbed).</li> <li><span class="math math-inline"><!></span> is the neural network, parameterized by <span class="math math-inline"><!></span>, which is optimized during training.</li></ul> <p>Ray are marched through the scene (starting from the camera), and this neural network is evaluated on multiple <em>query points</em> alongs these rays. Finally the color and density information at these query points for each ray are combined into a single color which is the final output color of the ray. Colors from all such rays are used to make up the final 2D rendered image.</p> <h2><strong>Implementing NeRF</strong></h2> <p>Below is a step by step implementation of NeRF, in Python and PyTorch. Throughout the code, assume the following imports are available throughout.</p> <!> <h4>Let’s start</h4> <p>Given a camera pose (position and viewing direction), the first thing we do is march a bundle of rays from the camera through every pixel of the image plane. The image plane is a plane placed in front of the camera where the final render of the 3D scene will be drawn. Think of it as a canvas where the final rendered scene will be drawn.</p> <p>Before moving on, let’s clear up what a <em>camera pose</em> even is. A camera pose is a <span class="math math-inline"><!></span> transformation matrix defining a transformation from camera-space to world-space.</p> <div class="math math-display"><!></div> <p>where the top <span class="math math-inline"><!></span> sub-matix represents the rotation of the camera, while the last column contains the translation <span class="math math-inline"><!></span> of the camera.</p> <p>The first step will be to create a bundle of rays (origins and directions) passing through each pixel of the image.</p> <!> <p>Now we have a set of <span class="math math-inline"><!></span> rays passing through each pixel. The next step is to create a set of query points along each rays. The following function does just that.</p> <!> <p>Recall that the neural network’s output should be 4 values representing the color <span class="math math-inline"><!></span> and the volume density <span class="math math-inline"><!></span> at the given query point. We will create the model later on, but for now assume that the <code>model</code> variable is, well, the NeRF model. It will take the query point as well as it’s viewing direction (which is just the position of the camera) concatenated together into a 6-tuple (3 for position and 3 for viewing direction). We can then evaluate this model on the query points created and returned by this function above as follows.</p> <!> <p>All this (<small><em>convoluted</em></small>) piece of code does is create and evaluate the query points (along each ray) on the model to get their color and volume density values stored in the <code>view_field</code> variable.</p> <h4>Combining the Query Points</h4> <p>The paper presents the following equation to get the final accumulated color of a ray <span class="math math-inline"><!></span>.</p> <div class="math math-display"><!></div> <p>where</p> <div class="math math-display"><!></div> <p>and <span class="math math-inline"><!></span> is the distance between consective query points <span class="math math-inline"><!></span>. This function reduces to traditional alpha compositing with alpha values <span class="math math-inline"><!></span>.</p> <p>We will implement this rendering in the following <code>nf_render_view_field()</code> function.</p> <!> <p>That the bulk of rendering part done. Now we will move to designing the actual neural network.</p> <h3>Creating the Neural Network</h3> <p>The network will be simple MLP with position and view direction input and will output 4 values representing the <span class="math math-inline"><!></span> color and the volume density <span class="math math-inline"><!></span> at the given position.</p> <h4>Positional Encoding</h4> <p>We can directly feed the query points and viewing directions into the neural network. However, as the paper suggest, it is beneficial to map the query points to a high-dimensional space before evaluation. NeRF employs <strong>positional encoding</strong> of the input coordinates <span class="math math-inline"><!></span> and <span class="math math-inline"><!></span>. Raw inputs are transformed into higher-dimensional representations using sinusoidal functions.</p> <p>The encoding maps a 3D coordinate into a <span class="math math-inline"><!></span>-D coordinate, where <span class="math math-inline"><!></span> is a configurable hyperparameter.</p> <div class="math math-display"><!></div> <p>This function <span class="math math-inline"><!></span> is applied separately to each of the three coordinate values.</p> <p>Here is the code for that</p> <!> <p>This encoding allows the neural network to capture fine details and complex variations in lighting and geometry, as highlighted in the NeRF paper.</p> <p>Also, we will need a few more helper functions for the working of the network.</p> <!> <p>And finally, here is a simple network.</p> <!> <h3>Training the Neural Network</h3> <p>The neural network is optimized to minimize the MSE loss between the rendered pixel values and the ground truth from input images:</p> <h4>Loss Calculation</h4> <p>The loss function used in the paper is a simple mean squared error loss between the predicted color and the true color of each pixel of the image.</p> <div class="math math-display"><!></div> <p>Here, <span class="math math-inline"><!></span> is the set of rays corresponding to the input images, and <span class="math math-inline"><!></span> represents the true pixel color for each ray.</p> <h4>Training Loop</h4> <p>We can use a standard pytorch training flow for training the network. I will not get into the details of the loading the training data, but on a high level, each training example is a pose along with it’s ground truth rendered image.</p> <!> <p>Once the training is complete, the network can be used to view the scene from any arbitrary position and viewing angle! You can do something like this</p> <!> <h3>Conclusion</h3> <p>Neural Radiance Fields (NeRF) does offer unprecedented quality and flexibility for reconstructing scenes from sparse image data. However, its computational demands and static scene assumption are some areas for improvement. Training a NeRF model is computationally intensive and often requirs hours or even days on powerful GPUs.</p> <p>There are some interesting ideas that I haven’t touched in this post, such as hierarchical sampling which optimizes NeRF’s efficiency, and converting the learned scene volume representation into 3D point cloud meshes — all of this perhaps for another post.</p> <p>One thing to note is that the standard NeRF formulation assumes that the scene is static, making it unsuitable for dynamic environments where objects or lighting conditions change over time. Extensions like <em>Dynamic NeRF</em> attempt to address this, but these approaches add complexity and often require significantly more data.</p> <p>At the end, I recommend reading the original paper <a href="https://arxiv.org/abs/2003.08934" rel="nofollow">“NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis”</a> by Mildenhall et al.</p>',1);function sa(ms){var q=Qs(),t=s(Zs(q),4),W=s(a(t)),ys=a(W);p(ys,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">RGB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">RGB</span></span></span></span>'),n(W),l(),n(t);var e=s(t,6),hs=a(e);p(hs,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo separator="true">,</mo><mi mathvariant="bold">d</mi><mo stretchy="false">)</mo><mo>→</mo><mo stretchy="false">(</mo><mi mathvariant="bold">c</mi><mo separator="true">,</mo><mi>σ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_\\theta(\\mathbf{x}, \\mathbf{d}) \\to (\\mathbf{c}, \\sigma)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbf">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathbf">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span></span></span>'),n(e);var o=s(e,4),i=a(o),G=a(i),Ds=a(G);p(Ds,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">x</mi><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathbf{x} = (x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>'),n(G),l(),n(i);var c=s(i,2),j=a(c),gs=a(j);p(gs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">d</mi><mo>=</mo><mo stretchy="false">(</mo><mi>θ</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathbf{d} = (\\theta, \\phi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mclose">)</span></span></span></span>'),n(j),l(),n(c);var r=s(c,2),V=a(r),ds=a(V);p(ds,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">c</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>g</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathbf{c} = (r, g, b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>'),n(V),l(),n(r);var m=s(r,2),S=a(m),Es=a(S);p(Es,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>'),n(S),l(),n(m);var P=s(m,2),y=a(P),vs=a(y);p(vs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">F_\\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>'),n(y);var I=s(y,2),us=a(I);p(us,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>'),n(I),l(),n(P),n(o);var U=s(o,8);p(U,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> torch</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">from</span><span style="color:#D6DEEB"> torch </span><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> nn</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> torch.nn.functional </span><span style="color:#C792EA;font-style:italic">as</span><span style="color:#D6DEEB"> F</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">import</span><span style="color:#D6DEEB"> matplotlib.pyplot </span><span style="color:#C792EA;font-style:italic">as</span><span style="color:#D6DEEB"> plt</span></span></code></pre>`);var h=s(U,6),O=s(a(h),3),Bs=a(O);p(Bs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4 \\times 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>'),n(O),l(),n(h);var D=s(h,2),Cs=a(D);p(Cs,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Pose</mtext><mo>=</mo><msub><mi>T</mi><mtext>cam-to-world</mtext></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>00</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>01</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>02</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>T</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>10</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>T</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>20</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>T</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\\text{Pose} = T_{\\text{cam-to-world}} = \\begin{bmatrix}
R_{00} &amp; R_{01} &amp; R_{02} &amp; T_x \\\\
R_{10} &amp; R_{11} &amp; R_{12} &amp; T_y \\\\
R_{20} &amp; R_{21} &amp; R_{22} &amp; T_z \\\\
0 &amp; 0 &amp; 0 &amp; 1
\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">Pose</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">cam-to-world</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">00</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">20</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">01</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">02</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span>`),n(D);var g=s(D,2),d=s(a(g)),Fs=a(d);p(Fs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3 \\times 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>'),n(d);var Z=s(d,2),As=a(Z);p(As,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>T</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>T</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>T</mi><mi>z</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[T_x, T_y, T_z]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>'),n(Z),l(),n(g);var Q=s(g,4);p(Q,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> nf_get_ray_bundle</span><span style="color:#D9F5DD">(</span></span>
<span class="line"><span style="color:#7FDBCA">    height</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#7FDBCA">    width</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#7FDBCA">    focal_length</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#7FDBCA">    pose</span><span style="color:#D6DEEB">: torch.Tensor</span></span>
<span class="line"><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#D6DEEB">    points_x, points_y </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">meshgrid</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#82AAFF">        torch.</span><span style="color:#B2CCD6">arange</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">width</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        torch.</span><span style="color:#B2CCD6">arange</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">height</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D7DBE0">        indexing</span><span style="color:#C792EA">=</span><span style="color:#D9F5DD">'</span><span style="color:#ECC48D">xy</span><span style="color:#D9F5DD">'</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    points_x </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> (points_x </span><span style="color:#C792EA">-</span><span style="color:#D6DEEB"> width </span><span style="color:#C792EA">/</span><span style="color:#F78C6C"> 2.0</span><span style="color:#D6DEEB">) </span><span style="color:#C792EA">/</span><span style="color:#D6DEEB"> focal_length</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # Note the -ve here, y in grid increases downwards while</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # y in NDC increases upwards</span></span>
<span class="line"><span style="color:#D6DEEB">    points_y </span><span style="color:#C792EA">=</span><span style="color:#C792EA"> -</span><span style="color:#D6DEEB">(points_y </span><span style="color:#C792EA">-</span><span style="color:#D6DEEB"> height </span><span style="color:#C792EA">/</span><span style="color:#F78C6C"> 2.0</span><span style="color:#D6DEEB">) </span><span style="color:#C792EA">/</span><span style="color:#D6DEEB"> focal_length</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # Camera faces the -ve Z direction in NDC</span></span>
<span class="line"><span style="color:#D6DEEB">    points_z </span><span style="color:#C792EA">=</span><span style="color:#C792EA"> -</span><span style="color:#D6DEEB">torch.</span><span style="color:#B2CCD6">ones_like</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">points_x</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    ray_dirs </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">stack</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#82AAFF">        (</span></span>
<span class="line"><span style="color:#82AAFF">            points_x,</span></span>
<span class="line"><span style="color:#82AAFF">            points_y,</span></span>
<span class="line"><span style="color:#82AAFF">            points_z,</span></span>
<span class="line"><span style="color:#82AAFF">        )</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D7DBE0">        dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    transform_rot </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> pose[:</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">, :</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">]</span></span>
<span class="line"><span style="color:#D6DEEB">    ray_dirs </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> ray_dirs </span><span style="color:#C792EA">@</span><span style="color:#D6DEEB"> transform_rot.T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    ray_origins </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> pose[:</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">, </span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">].</span><span style="color:#B2CCD6">expand</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">ray_dirs.shape</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#D6DEEB"> ray_origins, ray_dirs</span></span>
<span class="line"></span></code></pre>`);var E=s(Q,2),Y=s(a(E)),fs=a(Y);p(fs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">H \\times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>'),n(Y),l(),n(E);var J=s(E,2);p(J,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> nf_create_query_points</span><span style="color:#D9F5DD">(</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, 3)</span></span>
<span class="line"><span style="color:#7FDBCA">    ray_origins</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, 3)</span></span>
<span class="line"><span style="color:#7FDBCA">    ray_dirs</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#7FDBCA">    thresh_near</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">float</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#7FDBCA">    thresh_far</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">float</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#7FDBCA">    num_samples_per_ray</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (N,)</span></span>
<span class="line"><span style="color:#D6DEEB">    depths </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">linspace</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">thresh_near</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> thresh_far</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> num_samples_per_ray</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    query_points </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> (</span></span>
<span class="line"><span style="color:#D6DEEB">        ray_origins[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#FF5874">None</span><span style="color:#D6DEEB">, :]</span></span>
<span class="line"><span style="color:#C792EA">        +</span><span style="color:#D6DEEB"> ray_dirs[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#FF5874">None</span><span style="color:#D6DEEB">, :] </span><span style="color:#C792EA">*</span><span style="color:#D6DEEB"> depths[:, </span><span style="color:#FF5874">None</span><span style="color:#D6DEEB">]</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    #      (H, W, N, 3)  (*, N)</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#D6DEEB"> query_points, depths</span></span></code></pre>`);var v=s(J,2),u=s(a(v)),ws=a(u);p(ws,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>R</mi><mo separator="true">,</mo><mi>G</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(R, G, B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>'),n(u);var K=s(u,2),bs=a(K);p(bs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>'),n(K),l(3),n(v);var X=s(v,2);p(X,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> nf_render_pose</span><span style="color:#D9F5DD">(</span></span>
<span class="line"><span style="color:#7FDBCA">    height</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#7FDBCA">    width</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # This will input tensor of shape (*, 6) and output</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # tensor of shape (*, 4)</span></span>
<span class="line"><span style="color:#7FDBCA">    model</span><span style="color:#D6DEEB">: torch.nn.Module,</span></span>
<span class="line"><span style="color:#7FDBCA">    focal_length</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#7FDBCA">    pose</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#7FDBCA">    thresh_near</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#7FDBCA">    thresh_far</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#7FDBCA">    num_samples_per_ray</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # Create rays</span></span>
<span class="line"><span style="color:#D6DEEB">    ray_origins, ray_dirs </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> nf_get_ray_bundle</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#82AAFF">        height</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        width</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        focal_length</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        pose</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # Create query points</span></span>
<span class="line"><span style="color:#D6DEEB">    query_points, depths </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> nf_create_query_points</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#82AAFF">        ray_origins</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        ray_dirs</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        thresh_near</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        thresh_far</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        num_samples_per_ray</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H*W*N, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    flat_query_points </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> query_points.</span><span style="color:#B2CCD6">view</span><span style="color:#D6DEEB">(</span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D9F5DD">,</span><span style="color:#F78C6C"> 3</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    viewdirs_origin </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> ray_dirs </span><span style="color:#C792EA">/</span><span style="color:#D6DEEB"> torch.linalg.</span><span style="color:#B2CCD6">norm</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">ray_dirs</span><span style="color:#D9F5DD">,</span><span style="color:#D7DBE0"> dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#FF5874">None</span><span style="color:#D9F5DD">]</span></span>
<span class="line"><span style="color:#D6DEEB">    viewdirs </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> viewdirs_origin[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#FF5874">None</span><span style="color:#D6DEEB">, :].</span><span style="color:#B2CCD6">expand</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">query_points.shape</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H*W*N, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    flat_viewdirs </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> viewdirs.</span><span style="color:#B2CCD6">reshape</span><span style="color:#D6DEEB">(</span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D9F5DD">,</span><span style="color:#F78C6C"> 3</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H*W*N, 6)</span></span>
<span class="line"><span style="color:#D6DEEB">    flat_inputs </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">cat</span><span style="color:#D6DEEB">(</span><span style="color:#D9F5DD">[</span><span style="color:#82AAFF">flat_query_points, flat_viewdirs</span><span style="color:#D9F5DD">],</span><span style="color:#D7DBE0"> dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H*W*N, 4)</span></span>
<span class="line"><span style="color:#D6DEEB">    flat_view_field </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> model</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">chunk</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N, 4)</span></span>
<span class="line"><span style="color:#D6DEEB">    view_field </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> flat_view_field.</span><span style="color:#B2CCD6">view</span><span style="color:#D6DEEB">(</span><span style="color:#C5E478">list</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">query_points.shape</span><span style="color:#D6DEEB">[</span><span style="color:#82AAFF">:</span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">])</span><span style="color:#C792EA"> +</span><span style="color:#D9F5DD"> [</span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D9F5DD">]</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # ....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (This function nf_render_view_field() will be implemented later)</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, 3)</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#B2CCD6"> nf_render_view_field</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">view_field</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> depths</span><span style="color:#D6DEEB">)</span></span></code></pre>`);var B=s(X,6),$=s(a(B)),_s=a($);p(_s,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\\mathbf{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">r</span></span></span></span>'),n($),l(),n(B);var C=s(B,2),xs=a(C);p(xs,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>C</mtext><mo stretchy="false">(</mo><mi mathvariant="bold">r</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>T</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mtext>exp</mtext><mo stretchy="false">(</mo><mo>−</mo><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>δ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><msub><mi mathvariant="bold">c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\\text{C}(\\mathbf{r}) = \\sum_{i=1}^{n}T_i(1 - \\text{exp}(-\\sigma_i\\delta_i))\\mathbf{c}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">C</span></span><span class="mopen">(</span><span class="mord mathbf">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">exp</span></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mord"><span class="mord mathbf">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>'),n(C);var F=s(C,4),zs=a(F);p(zs,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mtext>exp</mtext><mo stretchy="false">(</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>σ</mi><mi>j</mi></msub><msub><mi>δ</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_{i} = \\text{exp}(-\\sum_{j=i}^{i-1}\\sigma_j\\delta_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2254em;vertical-align:-1.4138em;"></span><span class="mord text"><span class="mord">exp</span></span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8117em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>'),n(F);var A=s(F,2),f=s(a(A)),ks=a(f);p(ks,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>δ</mi><mi>i</mi></msub><mo>=</mo><msub><mi>t</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\\delta_i = t_{i+1} - t_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8234em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>'),n(f);var w=s(f,2),Ms=a(w);p(Ms,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">t_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>'),n(w);var ss=s(w,2),Rs=a(ss);p(Rs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>α</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mo>−</mo><mtext>exp</mtext><mo stretchy="false">(</mo><mo>−</mo><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>δ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\alpha_i = 1 - \\text{exp}(-\\sigma_i\\delta_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">exp</span></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>'),n(ss),l(),n(A);var as=s(A,4);p(as,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> cumprod_exclusive</span><span style="color:#D9F5DD">(</span><span style="color:#7FDBCA">tensor</span><span style="color:#D6DEEB">: torch.Tensor</span><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB"> -> torch.Tensor:</span></span>
<span class="line"><span style="color:#D6DEEB">    cumprod </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">cumprod</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">tensor</span><span style="color:#D9F5DD">,</span><span style="color:#D7DBE0"> dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#D6DEEB">    cumprod </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">roll</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">cumprod</span><span style="color:#D9F5DD">,</span><span style="color:#F78C6C"> 1</span><span style="color:#D9F5DD">,</span><span style="color:#D7DBE0"> dims</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#D6DEEB">    cumprod[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#F78C6C">0</span><span style="color:#D6DEEB">] </span><span style="color:#C792EA">=</span><span style="color:#F78C6C"> 1</span><span style="color:#D6DEEB">.</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#D6DEEB"> cumprod</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> nf_render_view_field</span><span style="color:#D9F5DD">(</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N, 4)</span></span>
<span class="line"><span style="color:#7FDBCA">    view_field</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (N,) or (H, W, N)</span></span>
<span class="line"><span style="color:#7FDBCA">    depths</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    rgb_field </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> view_field[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, :</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">]</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N)</span></span>
<span class="line"><span style="color:#D6DEEB">    sigma_field </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> view_field[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # Sigmoid function is used as rgb color must be in the range [0, 1]</span></span>
<span class="line"><span style="color:#D6DEEB">    rgb_field </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> F.</span><span style="color:#B2CCD6">sigmoid</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">rgb_field</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # Similarly relu is used here as density is always positive</span></span>
<span class="line"><span style="color:#D6DEEB">    sigma_field </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> F.</span><span style="color:#B2CCD6">relu</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">sigma_field</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (*, N - 1)</span></span>
<span class="line"><span style="color:#D6DEEB">    deltas </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> depths[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">:] </span><span style="color:#C792EA">-</span><span style="color:#D6DEEB"> depths[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, :</span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (*, N)</span></span>
<span class="line"><span style="color:#D6DEEB">    deltas </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">cat</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#82AAFF">        (</span></span>
<span class="line"><span style="color:#637777;font-style:italic">            # (*, N - 1)</span></span>
<span class="line"><span style="color:#82AAFF">            deltas,</span></span>
<span class="line"><span style="color:#637777;font-style:italic">            # (*, 1)</span></span>
<span class="line"><span style="color:#82AAFF">            torch.</span><span style="color:#B2CCD6">tensor</span><span style="color:#D6DEEB">(</span><span style="color:#D9F5DD">[</span><span style="color:#F78C6C">1e10</span><span style="color:#D9F5DD">]</span><span style="color:#D6DEEB">)</span><span style="color:#82AAFF">.</span><span style="color:#B2CCD6">expand</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">deltas</span><span style="color:#D6DEEB">[</span><span style="color:#82AAFF">..., :</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">]</span><span style="color:#82AAFF">.shape</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#82AAFF">        )</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D7DBE0">        dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N)</span></span>
<span class="line"><span style="color:#D6DEEB">    alpha </span><span style="color:#C792EA">=</span><span style="color:#F78C6C"> 1</span><span style="color:#D6DEEB">. </span><span style="color:#C792EA">-</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">exp</span><span style="color:#D6DEEB">(</span><span style="color:#C792EA">-</span><span style="color:#82AAFF">sigma_field </span><span style="color:#C792EA">*</span><span style="color:#82AAFF"> deltas</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N)</span></span>
<span class="line"><span style="color:#D6DEEB">    weights </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> alpha </span><span style="color:#C792EA">*</span><span style="color:#B2CCD6"> cumprod_exclusive</span><span style="color:#D6DEEB">(</span><span style="color:#F78C6C">1</span><span style="color:#82AAFF">. </span><span style="color:#C792EA">-</span><span style="color:#82AAFF"> alpha </span><span style="color:#C792EA">+</span><span style="color:#F78C6C"> 1e-10</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, N, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    rgb_map_points </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> (</span></span>
<span class="line"><span style="color:#637777;font-style:italic">      # (H, W, N, 1)</span></span>
<span class="line"><span style="color:#D6DEEB">      weights[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#FF5874">None</span><span style="color:#D6DEEB">]</span></span>
<span class="line"><span style="color:#C792EA">      *</span></span>
<span class="line"><span style="color:#637777;font-style:italic">      # (H, W, N, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">      rgb_field</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (H, W, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    c_r </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> rgb_map_points.</span><span style="color:#B2CCD6">sum</span><span style="color:#D6DEEB">(</span><span style="color:#D7DBE0">dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">2</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#D6DEEB"> c_r</span></span></code></pre>`);var b=s(as,6),_=s(a(b)),Ts=a(_);p(Ts,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>R</mi><mo separator="true">,</mo><mi>G</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(R, G, B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>'),n(_);var ns=s(_,2),Ls=a(ns);p(Ls,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>'),n(ns),l(),n(b);var x=s(b,4),z=s(a(x),3),Ns=a(z);p(Ns,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">x</span></span></span></span>'),n(z);var ps=s(z,2),Hs=a(ps);p(Hs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">d</mi></mrow><annotation encoding="application/x-tex">\\mathbf{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">d</span></span></span></span>'),n(ps),l(),n(x);var k=s(x,2),M=s(a(k)),qs=a(M);p(qs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>+</mo><mn>6</mn><mi>L</mi></mrow><annotation encoding="application/x-tex">3 + 6L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">6</span><span class="mord mathnormal">L</span></span></span></span>'),n(M);var ls=s(M,2),Ws=a(ls);p(Ws,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span>'),n(ls),l(),n(k);var R=s(k,2),Gs=a(R);p(Gs,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\\gamma(p) = \\left(\\sin(2^0 \\pi p), \\cos(2^0 \\pi p), \\ldots, \\sin(2^{L-1} \\pi p), \\cos(2^{L-1} \\pi p)\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2413em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span>'),n(R);var T=s(R,2),ts=s(a(T)),js=a(ts);p(js,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\gamma(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>'),n(ts),l(),n(T);var es=s(T,4);p(es,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> positional_encoding</span><span style="color:#D9F5DD">(</span></span>
<span class="line"><span style="color:#7FDBCA">    points</span><span style="color:#D6DEEB">: torch.Tensor,</span></span>
<span class="line"><span style="color:#7FDBCA">    L</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#C792EA">=</span><span style="color:#F78C6C">6</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#D6DEEB">    encoding </span><span style="color:#C792EA">=</span><span style="color:#D9F5DD"> [</span><span style="color:#D6DEEB">points</span><span style="color:#D9F5DD">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    freqs </span><span style="color:#C792EA">=</span><span style="color:#F78C6C"> 2.0</span><span style="color:#C792EA"> **</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">linspace</span><span style="color:#D6DEEB">(</span><span style="color:#F78C6C">0.0</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> L </span><span style="color:#C792EA">-</span><span style="color:#F78C6C"> 1</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> L</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    for</span><span style="color:#D6DEEB"> freq </span><span style="color:#C792EA;font-style:italic">in</span><span style="color:#D6DEEB"> freqs:</span></span>
<span class="line"><span style="color:#D6DEEB">        encoding.</span><span style="color:#B2CCD6">append</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">torch.</span><span style="color:#B2CCD6">sin</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">points </span><span style="color:#C792EA">*</span><span style="color:#82AAFF"> freq</span><span style="color:#D6DEEB">))</span></span>
<span class="line"><span style="color:#D6DEEB">        encoding.</span><span style="color:#B2CCD6">append</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">torch.</span><span style="color:#B2CCD6">cos</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">points </span><span style="color:#C792EA">*</span><span style="color:#82AAFF"> freq</span><span style="color:#D6DEEB">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    if</span><span style="color:#C5E478"> len</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">encoding</span><span style="color:#D6DEEB">) </span><span style="color:#C792EA">==</span><span style="color:#F78C6C"> 1</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">        return</span><span style="color:#D6DEEB"> encoding[</span><span style="color:#F78C6C">0</span><span style="color:#D6DEEB">]</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    else</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">        return</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">cat</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">encoding</span><span style="color:#D9F5DD">,</span><span style="color:#D7DBE0"> dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">)</span></span></code></pre>`);var os=s(es,6);p(os,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#D6DEEB">embed_num_pos </span><span style="color:#C792EA">=</span><span style="color:#F78C6C"> 6</span></span>
<span class="line"><span style="color:#D6DEEB">embed_num_dir </span><span style="color:#C792EA">=</span><span style="color:#F78C6C"> 6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> split_queries</span><span style="color:#D9F5DD">(</span></span>
<span class="line"><span style="color:#7FDBCA">    self</span><span style="color:#D6DEEB">,</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (B, 6)</span></span>
<span class="line"><span style="color:#7FDBCA">    queries</span><span style="color:#D6DEEB">: torch.Tensor</span></span>
<span class="line"><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (B, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    points </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> queries[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, :</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">]</span></span>
<span class="line"><span style="color:#637777;font-style:italic">    # (B, 3)</span></span>
<span class="line"><span style="color:#D6DEEB">    viewdirs </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> queries[</span><span style="color:#82AAFF">...</span><span style="color:#D6DEEB">, </span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    x_pos </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> positional_encoding</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">points</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> embed_num_pos</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#D6DEEB">    x_dir </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> positional_encoding</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">viewdirs</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> embed_num_dir</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#D6DEEB"> x_pos, x_dir</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> embed_len_3d</span><span style="color:#D9F5DD">(</span><span style="color:#7FDBCA">L</span><span style="color:#D6DEEB">: </span><span style="color:#C5E478">int</span><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#F78C6C"> 3</span><span style="color:#C792EA"> +</span><span style="color:#F78C6C"> 6</span><span style="color:#C792EA"> *</span><span style="color:#D6DEEB"> L</span></span></code></pre>`);var is=s(os,4);p(is,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#C792EA">class</span><span style="color:#FFCB8B"> SimpleNeRF</span><span style="color:#D6DEEB">(</span><span style="color:#C5E478">nn</span><span style="color:#D6DEEB">.</span><span style="color:#C5E478">Module</span><span style="color:#D6DEEB">):</span></span>
<span class="line"><span style="color:#C792EA">    def</span><span style="color:#C5E478"> __init__</span><span style="color:#D9F5DD">(</span><span style="color:#7FDBCA">self</span><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#C5E478">        super</span><span style="color:#D6DEEB">().</span><span style="color:#C5E478">__init__</span><span style="color:#D6DEEB">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">        hidden_size </span><span style="color:#C792EA">=</span><span style="color:#F78C6C"> 128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8EACE3">        self</span><span style="color:#D6DEEB">.layers </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> nn.</span><span style="color:#B2CCD6">Sequential</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#637777;font-style:italic">            # Layer 1: input (both pos and view dir)</span></span>
<span class="line"><span style="color:#82AAFF">            nn.</span><span style="color:#B2CCD6">Linear</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#B2CCD6">                embed_len_3d</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">embed_num_pos</span><span style="color:#D6DEEB">)</span><span style="color:#C792EA"> +</span><span style="color:#B2CCD6"> embed_len_3d</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">embed_num_dir</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">                hidden_size</span></span>
<span class="line"><span style="color:#D6DEEB">            )</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">            nn.</span><span style="color:#B2CCD6">ReLU</span><span style="color:#D6DEEB">()</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#637777;font-style:italic">            # Hidden layers</span></span>
<span class="line"><span style="color:#82AAFF">            torch.nn.</span><span style="color:#B2CCD6">Linear</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">hidden_size</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> hidden_size</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> nn.</span><span style="color:#B2CCD6">ReLU</span><span style="color:#D6DEEB">()</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">            torch.nn.</span><span style="color:#B2CCD6">Linear</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">hidden_size</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> hidden_size</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> nn.</span><span style="color:#B2CCD6">ReLU</span><span style="color:#D6DEEB">()</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#637777;font-style:italic">            # Output layer (colors + density)</span></span>
<span class="line"><span style="color:#82AAFF">            torch.nn.</span><span style="color:#B2CCD6">Linear</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">hidden_size</span><span style="color:#D9F5DD">,</span><span style="color:#F78C6C"> 4</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D6DEEB">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">    def</span><span style="color:#82AAFF;font-style:italic"> forward</span><span style="color:#D9F5DD">(</span><span style="color:#7FDBCA">self</span><span style="color:#D6DEEB">, </span><span style="color:#7FDBCA">queries</span><span style="color:#D6DEEB">: torch.Tensor</span><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#D6DEEB">        x_pos, x_dir </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> split_queries</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">queries</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#D6DEEB">        x </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">cat</span><span style="color:#D6DEEB">(</span><span style="color:#D9F5DD">[</span><span style="color:#82AAFF">x_pos, x_dir</span><span style="color:#D9F5DD">],</span><span style="color:#D7DBE0"> dim</span><span style="color:#C792EA">=-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">        return</span><span style="color:#8EACE3"> self</span><span style="color:#D6DEEB">.</span><span style="color:#B2CCD6">layers</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">x</span><span style="color:#D6DEEB">)</span></span></code></pre>`);var L=s(is,10),Vs=a(L);p(Vs,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">L</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi mathvariant="bold">r</mi><mo>∈</mo><mi mathvariant="script">R</mi></mrow></munder><msubsup><mrow><mo fence="true">∥</mo><mi mathvariant="bold">C</mi><mo stretchy="false">(</mo><mi mathvariant="bold">r</mi><mo stretchy="false">)</mo><mo>−</mo><msup><mi mathvariant="bold">C</mi><mtext>GT</mtext></msup><mo stretchy="false">(</mo><mi mathvariant="bold">r</mi><mo stretchy="false">)</mo><mo fence="true">∥</mo></mrow><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\\mathcal{L} = \\sum_{\\mathbf{r} \\in \\mathcal{R}} \\left\\| \\mathbf{C}(\\mathbf{r}) - \\mathbf{C}^\\text{GT}(\\mathbf{r}) \\right\\|_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.417em;vertical-align:-1.3217em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">r</span><span class="mrel mtight">∈</span><span class="mord mathcal mtight">R</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.85em;"><span class="pstrut" style="height:3.2em;"></span><span style="width:0.556em;height:1.200em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.556em" height="1.200em" viewBox="0 0 556 1200"><path d="M145 15 v585 v0 v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v0 v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v0 v585 h43z
M367 15 v585 v0 v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v0 v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M410 15 H367 v585 v0 v585 h43z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span><span class="mord mathbf">C</span><span class="mopen">(</span><span class="mord mathbf">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">GT</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">r</span><span class="mclose">)</span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.85em;"><span class="pstrut" style="height:3.2em;"></span><span style="width:0.556em;height:1.200em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.556em" height="1.200em" viewBox="0 0 556 1200"><path d="M145 15 v585 v0 v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v0 v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v0 v585 h43z
M367 15 v585 v0 v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v0 v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M410 15 H367 v585 v0 v585 h43z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0953em;"><span style="top:-2.3003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.3442em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3997em;"><span></span></span></span></span></span></span></span></span></span></span>`),n(L);var N=s(L,2),H=s(a(N)),Ss=a(H);p(Ss,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">R</mi></mrow><annotation encoding="application/x-tex">\\mathcal{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">R</span></span></span></span>'),n(H);var cs=s(H,2),Ps=a(cs);p(Ps,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="bold">C</mi><mtext>GT</mtext></msup><mo stretchy="false">(</mo><mi mathvariant="bold">r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathbf{C}^\\text{GT}(\\mathbf{r})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathbf">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">GT</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">r</span><span class="mclose">)</span></span></span></span>'),n(cs),l(),n(N);var rs=s(N,6);p(rs,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#637777;font-style:italic"># Assume this is a list of (pose, image) tuples</span></span>
<span class="line"><span style="color:#D6DEEB">train_dataset </span><span style="color:#C792EA">=</span><span style="color:#82AAFF"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic"># Also assume that variables (like height and width, etc) are</span></span>
<span class="line"><span style="color:#637777;font-style:italic"># set appropriately</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> predict</span><span style="color:#D9F5DD">(</span><span style="color:#7FDBCA">pose</span><span style="color:#D6DEEB">: torch.Tensor</span><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#B2CCD6"> nf_render_pose</span><span style="color:#D6DEEB">(</span></span>
<span class="line"><span style="color:#82AAFF">        height</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        width</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        model</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#82AAFF">        focal_length</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D7DBE0">        pose</span><span style="color:#C792EA">=</span><span style="color:#82AAFF">pose</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D7DBE0">        thresh_near</span><span style="color:#C792EA">=</span><span style="color:#F78C6C">2</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D7DBE0">        thresh_far</span><span style="color:#C792EA">=</span><span style="color:#F78C6C">6</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D7DBE0">        num_samples_per_ray</span><span style="color:#C792EA">=</span><span style="color:#F78C6C">32</span><span style="color:#D9F5DD">,</span></span>
<span class="line"><span style="color:#D6DEEB">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic"># Create the model</span></span>
<span class="line"><span style="color:#D6DEEB">model </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> SimpleNeRF</span><span style="color:#D6DEEB">()</span></span>
<span class="line"><span style="color:#D6DEEB">optimizer </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.optim.</span><span style="color:#B2CCD6">Adam</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">model.</span><span style="color:#B2CCD6">parameters</span><span style="color:#D6DEEB">()</span><span style="color:#D9F5DD">,</span><span style="color:#D7DBE0"> lr</span><span style="color:#C792EA">=</span><span style="color:#F78C6C">0.01</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">num_epochs </span><span style="color:#C792EA">=</span><span style="color:#F78C6C"> 16</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">for</span><span style="color:#D6DEEB"> i </span><span style="color:#C792EA;font-style:italic">in</span><span style="color:#C5E478"> range</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">num_epochs</span><span style="color:#D6DEEB">):</span></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    for</span><span style="color:#D6DEEB"> target_pose, target_image </span><span style="color:#C792EA;font-style:italic">in</span><span style="color:#D6DEEB"> train_dataset:</span></span>
<span class="line"><span style="color:#D6DEEB">        optimizer.</span><span style="color:#B2CCD6">zero_grad</span><span style="color:#D6DEEB">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">        image_predicted </span><span style="color:#C792EA">=</span><span style="color:#B2CCD6"> predict</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">target_pose</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#D6DEEB">        loss </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> F.</span><span style="color:#B2CCD6">mse_loss</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">image_predicted</span><span style="color:#D9F5DD">,</span><span style="color:#82AAFF"> target_image</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">        loss.</span><span style="color:#B2CCD6">backward</span><span style="color:#D6DEEB">()</span></span>
<span class="line"><span style="color:#D6DEEB">        optimizer.</span><span style="color:#B2CCD6">step</span><span style="color:#D6DEEB">()</span></span></code></pre>`);var Is=s(rs,4);p(Is,()=>`<pre class="shiki night-owl" style="background-color:#011627;color:#d6deeb" tabindex="0"><code><span class="line"><span style="color:#637777;font-style:italic"># Generates a random pose on a sphere of given radius</span></span>
<span class="line"><span style="color:#C792EA">def</span><span style="color:#82AAFF;font-style:italic"> random_spherical_pose</span><span style="color:#D9F5DD">(</span><span style="color:#7FDBCA">radius=</span><span style="color:#F78C6C">4</span><span style="color:#D9F5DD">)</span><span style="color:#D6DEEB">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    theta </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> (torch.</span><span style="color:#B2CCD6">rand</span><span style="color:#D6DEEB">(</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">) </span><span style="color:#C792EA">*</span><span style="color:#D6DEEB"> torch.pi </span><span style="color:#C792EA">*</span><span style="color:#F78C6C"> 2</span><span style="color:#D6DEEB">).</span><span style="color:#B2CCD6">item</span><span style="color:#D6DEEB">()</span></span>
<span class="line"><span style="color:#D6DEEB">    phi </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> (torch.</span><span style="color:#B2CCD6">rand</span><span style="color:#D6DEEB">(</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">) </span><span style="color:#C792EA">*</span><span style="color:#D6DEEB"> torch.pi </span><span style="color:#C792EA">*</span><span style="color:#F78C6C"> 2</span><span style="color:#D6DEEB">).</span><span style="color:#B2CCD6">item</span><span style="color:#D6DEEB">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    R_x </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">tensor</span><span style="color:#D6DEEB">(</span><span style="color:#D9F5DD">[[</span><span style="color:#F78C6C">1</span><span style="color:#82AAFF">, </span><span style="color:#F78C6C">0</span><span style="color:#82AAFF">, </span><span style="color:#F78C6C">0</span><span style="color:#D9F5DD">]</span><span style="color:#82AAFF">,</span></span>
<span class="line"><span style="color:#D9F5DD">                        [</span><span style="color:#F78C6C">0</span><span style="color:#82AAFF">, torch.</span><span style="color:#B2CCD6">cos</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">theta</span><span style="color:#D6DEEB">)</span><span style="color:#82AAFF">, </span><span style="color:#C792EA">-</span><span style="color:#82AAFF">torch.</span><span style="color:#B2CCD6">sin</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">theta</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">]</span><span style="color:#82AAFF">,</span></span>
<span class="line"><span style="color:#D9F5DD">                        [</span><span style="color:#F78C6C">0</span><span style="color:#82AAFF">, torch.</span><span style="color:#B2CCD6">sin</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">theta</span><span style="color:#D6DEEB">)</span><span style="color:#82AAFF">, torch.</span><span style="color:#B2CCD6">cos</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">theta</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">]]</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    R_y </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">tensor</span><span style="color:#D6DEEB">(</span><span style="color:#D9F5DD">[[</span><span style="color:#82AAFF">torch.</span><span style="color:#B2CCD6">cos</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">phi</span><span style="color:#D6DEEB">)</span><span style="color:#82AAFF">, </span><span style="color:#F78C6C">0</span><span style="color:#82AAFF">, torch.</span><span style="color:#B2CCD6">sin</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">phi</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">]</span><span style="color:#82AAFF">,</span></span>
<span class="line"><span style="color:#D9F5DD">                        [</span><span style="color:#F78C6C">0</span><span style="color:#82AAFF">, </span><span style="color:#F78C6C">1</span><span style="color:#82AAFF">, </span><span style="color:#F78C6C">0</span><span style="color:#D9F5DD">]</span><span style="color:#82AAFF">,</span></span>
<span class="line"><span style="color:#D9F5DD">                        [</span><span style="color:#C792EA">-</span><span style="color:#82AAFF">torch.</span><span style="color:#B2CCD6">sin</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">phi</span><span style="color:#D6DEEB">)</span><span style="color:#82AAFF">, </span><span style="color:#F78C6C">0</span><span style="color:#82AAFF">, torch.</span><span style="color:#B2CCD6">cos</span><span style="color:#D6DEEB">(</span><span style="color:#82AAFF">phi</span><span style="color:#D6DEEB">)</span><span style="color:#D9F5DD">]]</span><span style="color:#D6DEEB">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    cam_rot </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> R_y </span><span style="color:#C792EA">@</span><span style="color:#D6DEEB"> R_x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#637777;font-style:italic">    # Make the camera look towards the origin</span></span>
<span class="line"><span style="color:#D6DEEB">    cam_backwards </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> cam_rot[:, </span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">]</span></span>
<span class="line"><span style="color:#D6DEEB">    cam_pos </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> radius </span><span style="color:#C792EA">*</span><span style="color:#D6DEEB"> cam_backwards</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">    pose </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> torch.</span><span style="color:#B2CCD6">eye</span><span style="color:#D6DEEB">(</span><span style="color:#F78C6C">4</span><span style="color:#D6DEEB">)</span></span>
<span class="line"><span style="color:#D6DEEB">    pose[:</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">, :</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">] </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> cam_rot</span></span>
<span class="line"><span style="color:#D6DEEB">    pose[:</span><span style="color:#F78C6C">3</span><span style="color:#D6DEEB">, </span><span style="color:#C792EA">-</span><span style="color:#F78C6C">1</span><span style="color:#D6DEEB">] </span><span style="color:#C792EA">=</span><span style="color:#D6DEEB"> cam_pos</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;font-style:italic">    return</span><span style="color:#D6DEEB"> pose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D6DEEB">plt.</span><span style="color:#B2CCD6">imshow</span><span style="color:#D6DEEB">(</span><span style="color:#B2CCD6">predict</span><span style="color:#D6DEEB">(</span><span style="color:#B2CCD6">random_spherical_pose</span><span style="color:#D6DEEB">())</span><span style="color:#82AAFF">.</span><span style="color:#B2CCD6">detach</span><span style="color:#D6DEEB">())</span></span></code></pre>`),l(10),Us(ms,q)}export{sa as default,$s as metadata};
